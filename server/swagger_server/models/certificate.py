# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Certificate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, ca_name: str=None, latest_valid: bool=None, public_key: str=None, private_key: str=None, ca: str=None, valid_start: datetime=None, valid_end: datetime=None, status: str=None):  # noqa: E501
        """Certificate - a model defined in Swagger

        :param domain: The domain of this Certificate.  # noqa: E501
        :type domain: str
        :param ca_name: The ca_name of this Certificate.  # noqa: E501
        :type ca_name: str
        :param latest_valid: The latest_valid of this Certificate.  # noqa: E501
        :type latest_valid: bool
        :param public_key: The public_key of this Certificate.  # noqa: E501
        :type public_key: str
        :param private_key: The private_key of this Certificate.  # noqa: E501
        :type private_key: str
        :param ca: The ca of this Certificate.  # noqa: E501
        :type ca: str
        :param valid_start: The valid_start of this Certificate.  # noqa: E501
        :type valid_start: datetime
        :param valid_end: The valid_end of this Certificate.  # noqa: E501
        :type valid_end: datetime
        :param status: The status of this Certificate.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'domain': str,
            'ca_name': str,
            'latest_valid': bool,
            'public_key': str,
            'private_key': str,
            'ca': str,
            'valid_start': datetime,
            'valid_end': datetime,
            'status': str
        }

        self.attribute_map = {
            'domain': 'domain',
            'ca_name': 'ca_name',
            'latest_valid': 'latest_valid',
            'public_key': 'public_key',
            'private_key': 'private_key',
            'ca': 'ca',
            'valid_start': 'valid_start',
            'valid_end': 'valid_end',
            'status': 'status'
        }

        self._domain = domain
        self._ca_name = ca_name
        self._latest_valid = latest_valid
        self._public_key = public_key
        self._private_key = private_key
        self._ca = ca
        self._valid_start = valid_start
        self._valid_end = valid_end
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Certificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Certificate of this Certificate.  # noqa: E501
        :rtype: Certificate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self) -> str:
        """Gets the domain of this Certificate.


        :return: The domain of this Certificate.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this Certificate.


        :param domain: The domain of this Certificate.
        :type domain: str
        """

        self._domain = domain

    @property
    def ca_name(self) -> str:
        """Gets the ca_name of this Certificate.


        :return: The ca_name of this Certificate.
        :rtype: str
        """
        return self._ca_name

    @ca_name.setter
    def ca_name(self, ca_name: str):
        """Sets the ca_name of this Certificate.


        :param ca_name: The ca_name of this Certificate.
        :type ca_name: str
        """

        self._ca_name = ca_name

    @property
    def latest_valid(self) -> bool:
        """Gets the latest_valid of this Certificate.


        :return: The latest_valid of this Certificate.
        :rtype: bool
        """
        return self._latest_valid

    @latest_valid.setter
    def latest_valid(self, latest_valid: bool):
        """Sets the latest_valid of this Certificate.


        :param latest_valid: The latest_valid of this Certificate.
        :type latest_valid: bool
        """

        self._latest_valid = latest_valid

    @property
    def public_key(self) -> str:
        """Gets the public_key of this Certificate.


        :return: The public_key of this Certificate.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key: str):
        """Sets the public_key of this Certificate.


        :param public_key: The public_key of this Certificate.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def private_key(self) -> str:
        """Gets the private_key of this Certificate.


        :return: The private_key of this Certificate.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key: str):
        """Sets the private_key of this Certificate.


        :param private_key: The private_key of this Certificate.
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def ca(self) -> str:
        """Gets the ca of this Certificate.


        :return: The ca of this Certificate.
        :rtype: str
        """
        return self._ca

    @ca.setter
    def ca(self, ca: str):
        """Sets the ca of this Certificate.


        :param ca: The ca of this Certificate.
        :type ca: str
        """

        self._ca = ca

    @property
    def valid_start(self) -> datetime:
        """Gets the valid_start of this Certificate.


        :return: The valid_start of this Certificate.
        :rtype: datetime
        """
        return self._valid_start

    @valid_start.setter
    def valid_start(self, valid_start: datetime):
        """Sets the valid_start of this Certificate.


        :param valid_start: The valid_start of this Certificate.
        :type valid_start: datetime
        """

        self._valid_start = valid_start

    @property
    def valid_end(self) -> datetime:
        """Gets the valid_end of this Certificate.


        :return: The valid_end of this Certificate.
        :rtype: datetime
        """
        return self._valid_end

    @valid_end.setter
    def valid_end(self, valid_end: datetime):
        """Sets the valid_end of this Certificate.


        :param valid_end: The valid_end of this Certificate.
        :type valid_end: datetime
        """

        self._valid_end = valid_end

    @property
    def status(self) -> str:
        """Gets the status of this Certificate.


        :return: The status of this Certificate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Certificate.


        :param status: The status of this Certificate.
        :type status: str
        """
        allowed_values = ["Valid", "Expired", "ValidInFutur", "ToValidate"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
