# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Notification(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, payload: object=None, status: str=None, status_message: str=None):  # noqa: E501
        """Notification - a model defined in Swagger

        :param message: The message of this Notification.  # noqa: E501
        :type message: str
        :param payload: The payload of this Notification.  # noqa: E501
        :type payload: object
        :param status: The status of this Notification.  # noqa: E501
        :type status: str
        :param status_message: The status_message of this Notification.  # noqa: E501
        :type status_message: str
        """
        self.swagger_types = {
            'message': str,
            'payload': object,
            'status': str,
            'status_message': str
        }

        self.attribute_map = {
            'message': 'message',
            'payload': 'payload',
            'status': 'status',
            'status_message': 'status_message'
        }

        self._message = message
        self._payload = payload
        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Notification of this Notification.  # noqa: E501
        :rtype: Notification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self) -> str:
        """Gets the message of this Notification.


        :return: The message of this Notification.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Notification.


        :param message: The message of this Notification.
        :type message: str
        """

        self._message = message

    @property
    def payload(self) -> object:
        """Gets the payload of this Notification.


        :return: The payload of this Notification.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload: object):
        """Sets the payload of this Notification.


        :param payload: The payload of this Notification.
        :type payload: object
        """

        self._payload = payload

    @property
    def status(self) -> str:
        """Gets the status of this Notification.


        :return: The status of this Notification.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Notification.


        :param status: The status of this Notification.
        :type status: str
        """
        allowed_values = ["ToSubmit", "Submit", "ReSubmit", "Deploying", "Deployed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self) -> str:
        """Gets the status_message of this Notification.


        :return: The status_message of this Notification.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message: str):
        """Sets the status_message of this Notification.


        :param status_message: The status_message of this Notification.
        :type status_message: str
        """

        self._status_message = status_message
