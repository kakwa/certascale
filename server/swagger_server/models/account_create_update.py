# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AccountCreateUpdate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, permission: str=None, tag: object=None):  # noqa: E501
        """AccountCreateUpdate - a model defined in Swagger

        :param name: The name of this AccountCreateUpdate.  # noqa: E501
        :type name: str
        :param permission: The permission of this AccountCreateUpdate.  # noqa: E501
        :type permission: str
        :param tag: The tag of this AccountCreateUpdate.  # noqa: E501
        :type tag: object
        """
        self.swagger_types = {
            'name': str,
            'permission': str,
            'tag': object
        }

        self.attribute_map = {
            'name': 'name',
            'permission': 'permission',
            'tag': 'tag'
        }

        self._name = name
        self._permission = permission
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt) -> 'AccountCreateUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountCreateUpdate of this AccountCreateUpdate.  # noqa: E501
        :rtype: AccountCreateUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this AccountCreateUpdate.


        :return: The name of this AccountCreateUpdate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AccountCreateUpdate.


        :param name: The name of this AccountCreateUpdate.
        :type name: str
        """

        self._name = name

    @property
    def permission(self) -> str:
        """Gets the permission of this AccountCreateUpdate.


        :return: The permission of this AccountCreateUpdate.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission: str):
        """Sets the permission of this AccountCreateUpdate.


        :param permission: The permission of this AccountCreateUpdate.
        :type permission: str
        """
        allowed_values = ["Read", "Write", "AdminRead", "AdminWrite", "SelfRegisterDomain"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def tag(self) -> object:
        """Gets the tag of this AccountCreateUpdate.


        :return: The tag of this AccountCreateUpdate.
        :rtype: object
        """
        return self._tag

    @tag.setter
    def tag(self, tag: object):
        """Sets the tag of this AccountCreateUpdate.


        :param tag: The tag of this AccountCreateUpdate.
        :type tag: object
        """

        self._tag = tag
