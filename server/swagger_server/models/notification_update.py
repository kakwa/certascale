# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class NotificationUpdate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, status_message: str=None):  # noqa: E501
        """NotificationUpdate - a model defined in Swagger

        :param status: The status of this NotificationUpdate.  # noqa: E501
        :type status: str
        :param status_message: The status_message of this NotificationUpdate.  # noqa: E501
        :type status_message: str
        """
        self.swagger_types = {
            'status': str,
            'status_message': str
        }

        self.attribute_map = {
            'status': 'status',
            'status_message': 'status_message'
        }

        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt) -> 'NotificationUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NotificationUpdate of this NotificationUpdate.  # noqa: E501
        :rtype: NotificationUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this NotificationUpdate.


        :return: The status of this NotificationUpdate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this NotificationUpdate.


        :param status: The status of this NotificationUpdate.
        :type status: str
        """
        allowed_values = ["ToSubmit", "Submitted", "ReSubmitted", "Error", "Deploying", "Deployed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self) -> str:
        """Gets the status_message of this NotificationUpdate.


        :return: The status_message of this NotificationUpdate.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message: str):
        """Sets the status_message of this NotificationUpdate.


        :param status_message: The status_message of this NotificationUpdate.
        :type status_message: str
        """

        self._status_message = status_message
