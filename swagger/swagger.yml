swagger: '2.0'
info:
  version: 1.0.0
  title: certascale API
  description: Certascale API documentation
  license:
    name: MIT
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /account:
    get:
      description: Get the list of accounts (paginated)
      operationId: account_list
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AccountDefinitionList'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '500':
          $ref: '#/responses/500'
      tags:
        - Account
    post:
      description: Create a new account
      operationId: account_create
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AccountCreateUpdate'
          description: Data structure to create the account
          x-example:
            name: "AccountName"
            tags: {"TagName": "TagValue"}
            permission: "Read"
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/AccountDefinition'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '500':
          $ref: '#/responses/500'
      tags:
        - Account
  /account/{accountId}:
    parameters:
      - name: accountId
        required: true
        in: path
        type: string
    get:
      description: Get the details of a specific account
      operationId: account_get
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AccountDefinition'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Account doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Account
    delete:
      description: Remove the account
      operationId: account_delete
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/DefaultMessage'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Account doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Account
    put:
      description: Update an existing account
      operationId: account_update
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AccountCreateUpdate'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/DefaultMessage'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Account doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Account
  /account/{accountId}/apikey/:
    parameters:
      - name: accountId
        required: true
        in: path
        type: string
    get:
      description: Get the list of API keys for a given account
      operationId: apikey_list
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiKeyList'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Account doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Account
    post:
      description: Create a new API key
      operationId: apikey_create
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiKey'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '500':
          $ref: '#/responses/500'
      tags:
        - Account
  /account/{accountId}/apikey/{keyId}:
    parameters:
      - name: accountId
        required: true
        in: path
        type: string
      - name: keyId
        required: true
        in: path
        type: string
    get:
      description: Get a given API key
      operationId: apikey_get
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiKey'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Account doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Account
    delete:
      description: Delete a given key
      operationId: apikey_delete
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/DefaultMessage'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Account doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Account
  /domain:
    get:
      description: Get the list of your domains
      operationId: domain_list
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/DomainList'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '500':
          $ref: '#/responses/500'
      tags:
        - Domain
    post:
      description: Register a new domain
      operationId: domain_create
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DomainCreateUpdate'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/Domain'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '500':
          $ref: '#/responses/500'
      tags:
        - Domain
  /domain/{domainName}:
    parameters:
      - name: domainName
        required: true
        in: path
        type: string
    get:
      description: Get the details of a specific domain
      operationId: domain_get
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Domain'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '500':
          $ref: '#/responses/500'
      tags:
        - Domain
    delete:
      description: Remove the domain
      operationId: domain_delete
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/DefaultMessage'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '500':
          $ref: '#/responses/500'
      tags:
        - Domain
  /domain/{domainName}/certificate/:
    parameters:
      - name: domainName
        in: path
        required: true
        type: string
    get:
      description: Get the list of certificate for a specific domain
      operationId: certificate_list
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/CertificateList'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Domain doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Domain
    post:
      description: Post an externally generated certificate
      operationId: certificate_create
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CertificatePayload'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/DefaultMessage'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Domain doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Domain
  /domain/{domainName}/certificate/{certificateId}:
    parameters:
      - name: domainName
        in: path
        required: true
        type: string
      - name: certificateId
        in: path
        required: true
        type: string
    get:
      description: Get a specific certificate and the associated key and CA
      operationId: certificate_get
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Certificate'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Certificate or domain doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Domain
    delete:
      description: Remove the certificate
      operationId: certificate_delete
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/DefaultMessage'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Certificate or domain doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Domain
  /notification:
    get:
      description: Get all your certificate update notifications
      operationId: notification_list
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/NotificationList'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '500':
          $ref: '#/responses/500'
      tags:
        - Notification
  /notification/{notificationId}:
    parameters:
      - name: notificationId
        in: path
        required: true
        type: string
    get:
      description: Get specific content for a notification
      operationId: notification_get
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Notification'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Notification doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Notification
    put:
      description: Acknowledge the notification
      operationId: notification_acknowledge
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/NotificationAck'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/DefaultMessage'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '403':
          $ref: '#/responses/403'
        '404':
          description: Notification doesn't exist
          schema:
            $ref: '#/definitions/DefaultError'
        '500':
          $ref: '#/responses/500'
      tags:
        - Notification

# Default response for most of the verbs
responses:
  '400':
    description: Bad Request
    schema:
      $ref: '#/definitions/DefaultError'
  '401':
    description: Unauthorized
    schema:
      $ref: '#/definitions/DefaultError'
  '403':
    description: Forbidden
    schema:
      $ref: '#/definitions/DefaultError'
  '500':
    description: Internal Server Error
    schema:
      $ref: '#/definitions/DefaultError'

# Data structure definition
definitions:
  AccountCreateUpdate:
    description: Account definition
    type: object
    properties:
      name:
        type: string
      permission:
        type: string
        enum:
          - Read
          - Write
          - Admin
          - SelfRegisterDomain
      tag:
        properties: {}
  AccountDefinition:
    description: Account definition
    type: object
    properties:
      name:
        type: string
      permission:
        type: string
        enum:
          - Read
          - Write
          - Admin
          - SelfRegisterDomain
      tag:
        properties: {}
      domains:
        type: array
        items:
          type: string
      create_date:
        type: string
        format: date-time
      last_modification_date:
        type: string
        format: date-time
  AccountDefinitionList:
    type: array
    items:
      $ref: '#/definitions/AccountDefinition'

  ApiKey:
    description: Api key object
    type: object
    properties:
      id:
        type: string
        description: ID of the key
      secret:
        type: string
        description: key secret (full content at creation, first digits afterward)
      create_date:
        type: string
        format: date-time
      last_modification_date:
        type: string
        format: date-time
  ApiKeyList:
    type: array
    items:
      $ref: '#/definitions/ApiKey'
  Domain:
    description: Domain definition
    type: object
    properties:
      name:
        type: string
      create_date:
        type: string
        format: date-time
      last_modification_date:
        type: string
        format: date-time
  DomainCreateUpdate:
    description: Domain definition
    type: object
    properties:
      name:
        type: string

  DomainList:
    type: array
    items:
      $ref: '#/definitions/Domain'

  Certificate:
    description: Certificate definition
    type: object
    properties:
      domain:
        type: string
      ca_name:
        type: string
      latest_valide:
        type: bool
      public_key:
        type: string
      private_key:
        type: string
      ca:
        type: string
      valid_start:
        type: string
        format: date-time
      valid_end:
        type: string
        format: date-time
      status:
        type: string
        enum:
          - Valid
          - Expired
          - ValidInFutur
          - ToValidate
  CertificateList:
    type: array
    items:
      $ref: '#/definitions/Certificate'

  CertificatePayload:
    description: Certificate + Key + CA
    type: object
    properties:
      certification:
        type: string
      key:
        type: string
      ca:
        type: string


  Notification:
    description: Notification message
    type: object
    properties:
      message:
        type: string
      payload:
        type: object
      status:
        type: string
        enum:
          - ToSubmit
          - Submit
          - ReSubmit
          - Deploying
          - Deployed
      status_message:
        type: string
  NotificationList:
    description: List of notifications
    type: array
    items:
      $ref: '#/definitions/Notification'

  NotificationUpdate:
    description: Notification status update payload
    type: object
    properties:
      status:
        type: string
        enum:
          - ToSubmit
          - Submit
          - ReSubmit
          - Deploying
          - Deployed
      status_message:
        type: string

  DefaultError:
    type: object
    properties:
      code:
        type: string
        enum:
          - AccessDeny
          - InsufficientPermission
          - InvalidInputData
        description: Error code
      message:
        type: string
        description: Error message details
  DefaultMessage:
    type: object
    properties:
      message:
        type: string
        description: Message
