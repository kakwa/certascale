# coding: utf-8

"""
    certascale API

    Certascale API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Certificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'ca_name': 'str',
        'latest_valid': 'bool',
        'public_key': 'str',
        'private_key': 'str',
        'ca': 'str',
        'valid_start': 'datetime',
        'valid_end': 'datetime',
        'status': 'str'
    }

    attribute_map = {
        'domain': 'domain',
        'ca_name': 'ca_name',
        'latest_valid': 'latest_valid',
        'public_key': 'public_key',
        'private_key': 'private_key',
        'ca': 'ca',
        'valid_start': 'valid_start',
        'valid_end': 'valid_end',
        'status': 'status'
    }

    def __init__(self, domain=None, ca_name=None, latest_valid=None, public_key=None, private_key=None, ca=None, valid_start=None, valid_end=None, status=None):  # noqa: E501
        """Certificate - a model defined in Swagger"""  # noqa: E501

        self._domain = None
        self._ca_name = None
        self._latest_valid = None
        self._public_key = None
        self._private_key = None
        self._ca = None
        self._valid_start = None
        self._valid_end = None
        self._status = None
        self.discriminator = None

        if domain is not None:
            self.domain = domain
        if ca_name is not None:
            self.ca_name = ca_name
        if latest_valid is not None:
            self.latest_valid = latest_valid
        if public_key is not None:
            self.public_key = public_key
        if private_key is not None:
            self.private_key = private_key
        if ca is not None:
            self.ca = ca
        if valid_start is not None:
            self.valid_start = valid_start
        if valid_end is not None:
            self.valid_end = valid_end
        if status is not None:
            self.status = status

    @property
    def domain(self):
        """Gets the domain of this Certificate.  # noqa: E501


        :return: The domain of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Certificate.


        :param domain: The domain of this Certificate.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def ca_name(self):
        """Gets the ca_name of this Certificate.  # noqa: E501


        :return: The ca_name of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._ca_name

    @ca_name.setter
    def ca_name(self, ca_name):
        """Sets the ca_name of this Certificate.


        :param ca_name: The ca_name of this Certificate.  # noqa: E501
        :type: str
        """

        self._ca_name = ca_name

    @property
    def latest_valid(self):
        """Gets the latest_valid of this Certificate.  # noqa: E501


        :return: The latest_valid of this Certificate.  # noqa: E501
        :rtype: bool
        """
        return self._latest_valid

    @latest_valid.setter
    def latest_valid(self, latest_valid):
        """Sets the latest_valid of this Certificate.


        :param latest_valid: The latest_valid of this Certificate.  # noqa: E501
        :type: bool
        """

        self._latest_valid = latest_valid

    @property
    def public_key(self):
        """Gets the public_key of this Certificate.  # noqa: E501


        :return: The public_key of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this Certificate.


        :param public_key: The public_key of this Certificate.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def private_key(self):
        """Gets the private_key of this Certificate.  # noqa: E501


        :return: The private_key of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this Certificate.


        :param private_key: The private_key of this Certificate.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def ca(self):
        """Gets the ca of this Certificate.  # noqa: E501


        :return: The ca of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """Sets the ca of this Certificate.


        :param ca: The ca of this Certificate.  # noqa: E501
        :type: str
        """

        self._ca = ca

    @property
    def valid_start(self):
        """Gets the valid_start of this Certificate.  # noqa: E501


        :return: The valid_start of this Certificate.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_start

    @valid_start.setter
    def valid_start(self, valid_start):
        """Sets the valid_start of this Certificate.


        :param valid_start: The valid_start of this Certificate.  # noqa: E501
        :type: datetime
        """

        self._valid_start = valid_start

    @property
    def valid_end(self):
        """Gets the valid_end of this Certificate.  # noqa: E501


        :return: The valid_end of this Certificate.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_end

    @valid_end.setter
    def valid_end(self, valid_end):
        """Sets the valid_end of this Certificate.


        :param valid_end: The valid_end of this Certificate.  # noqa: E501
        :type: datetime
        """

        self._valid_end = valid_end

    @property
    def status(self):
        """Gets the status of this Certificate.  # noqa: E501


        :return: The status of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Certificate.


        :param status: The status of this Certificate.  # noqa: E501
        :type: str
        """
        allowed_values = ["Valid", "Expired", "ValidInFutur", "ToValidate"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Certificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
