# coding: utf-8

"""
    certascale API

    Certascale API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'permission': 'str',
        'tag': 'object',
        'domains': 'list[str]',
        'create_date': 'datetime',
        'last_modification_date': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'permission': 'permission',
        'tag': 'tag',
        'domains': 'domains',
        'create_date': 'create_date',
        'last_modification_date': 'last_modification_date'
    }

    def __init__(self, name=None, permission=None, tag=None, domains=None, create_date=None, last_modification_date=None):  # noqa: E501
        """AccountDefinition - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._permission = None
        self._tag = None
        self._domains = None
        self._create_date = None
        self._last_modification_date = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if permission is not None:
            self.permission = permission
        if tag is not None:
            self.tag = tag
        if domains is not None:
            self.domains = domains
        if create_date is not None:
            self.create_date = create_date
        if last_modification_date is not None:
            self.last_modification_date = last_modification_date

    @property
    def name(self):
        """Gets the name of this AccountDefinition.  # noqa: E501


        :return: The name of this AccountDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountDefinition.


        :param name: The name of this AccountDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def permission(self):
        """Gets the permission of this AccountDefinition.  # noqa: E501


        :return: The permission of this AccountDefinition.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this AccountDefinition.


        :param permission: The permission of this AccountDefinition.  # noqa: E501
        :type: str
        """
        allowed_values = ["Read", "Write", "AdminRead", "AdminWrite", "SelfRegisterDomain"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"  # noqa: E501
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def tag(self):
        """Gets the tag of this AccountDefinition.  # noqa: E501


        :return: The tag of this AccountDefinition.  # noqa: E501
        :rtype: object
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this AccountDefinition.


        :param tag: The tag of this AccountDefinition.  # noqa: E501
        :type: object
        """

        self._tag = tag

    @property
    def domains(self):
        """Gets the domains of this AccountDefinition.  # noqa: E501


        :return: The domains of this AccountDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this AccountDefinition.


        :param domains: The domains of this AccountDefinition.  # noqa: E501
        :type: list[str]
        """

        self._domains = domains

    @property
    def create_date(self):
        """Gets the create_date of this AccountDefinition.  # noqa: E501


        :return: The create_date of this AccountDefinition.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this AccountDefinition.


        :param create_date: The create_date of this AccountDefinition.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def last_modification_date(self):
        """Gets the last_modification_date of this AccountDefinition.  # noqa: E501


        :return: The last_modification_date of this AccountDefinition.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_date

    @last_modification_date.setter
    def last_modification_date(self, last_modification_date):
        """Sets the last_modification_date of this AccountDefinition.


        :param last_modification_date: The last_modification_date of this AccountDefinition.  # noqa: E501
        :type: datetime
        """

        self._last_modification_date = last_modification_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
