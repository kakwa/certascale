# coding: utf-8

"""
    certascale API

    Certascale API documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DomainApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def certificate_create(self, domain_name, body, **kwargs):  # noqa: E501
        """certificate_create  # noqa: E501

        Post an externally generated certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.certificate_create(domain_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :param CertificatePayload body: (required)
        :return: DefaultMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.certificate_create_with_http_info(domain_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.certificate_create_with_http_info(domain_name, body, **kwargs)  # noqa: E501
            return data

    def certificate_create_with_http_info(self, domain_name, body, **kwargs):  # noqa: E501
        """certificate_create  # noqa: E501

        Post an externally generated certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.certificate_create_with_http_info(domain_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :param CertificatePayload body: (required)
        :return: DefaultMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method certificate_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_name' is set
        if ('domain_name' not in params or
                params['domain_name'] is None):
            raise ValueError("Missing the required parameter `domain_name` when calling `certificate_create`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `certificate_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_name' in params:
            path_params['domainName'] = params['domain_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/domain/{domainName}/certificate/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultMessage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def certificate_delete(self, domain_name, certificate_id, **kwargs):  # noqa: E501
        """certificate_delete  # noqa: E501

        Remove the certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.certificate_delete(domain_name, certificate_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :param str certificate_id: (required)
        :return: DefaultMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.certificate_delete_with_http_info(domain_name, certificate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.certificate_delete_with_http_info(domain_name, certificate_id, **kwargs)  # noqa: E501
            return data

    def certificate_delete_with_http_info(self, domain_name, certificate_id, **kwargs):  # noqa: E501
        """certificate_delete  # noqa: E501

        Remove the certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.certificate_delete_with_http_info(domain_name, certificate_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :param str certificate_id: (required)
        :return: DefaultMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_name', 'certificate_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method certificate_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_name' is set
        if ('domain_name' not in params or
                params['domain_name'] is None):
            raise ValueError("Missing the required parameter `domain_name` when calling `certificate_delete`")  # noqa: E501
        # verify the required parameter 'certificate_id' is set
        if ('certificate_id' not in params or
                params['certificate_id'] is None):
            raise ValueError("Missing the required parameter `certificate_id` when calling `certificate_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_name' in params:
            path_params['domainName'] = params['domain_name']  # noqa: E501
        if 'certificate_id' in params:
            path_params['certificateId'] = params['certificate_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/domain/{domainName}/certificate/{certificateId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultMessage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def certificate_get(self, domain_name, certificate_id, **kwargs):  # noqa: E501
        """certificate_get  # noqa: E501

        Get a specific certificate and the associated key and CA  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.certificate_get(domain_name, certificate_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :param str certificate_id: (required)
        :return: Certificate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.certificate_get_with_http_info(domain_name, certificate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.certificate_get_with_http_info(domain_name, certificate_id, **kwargs)  # noqa: E501
            return data

    def certificate_get_with_http_info(self, domain_name, certificate_id, **kwargs):  # noqa: E501
        """certificate_get  # noqa: E501

        Get a specific certificate and the associated key and CA  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.certificate_get_with_http_info(domain_name, certificate_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :param str certificate_id: (required)
        :return: Certificate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_name', 'certificate_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method certificate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_name' is set
        if ('domain_name' not in params or
                params['domain_name'] is None):
            raise ValueError("Missing the required parameter `domain_name` when calling `certificate_get`")  # noqa: E501
        # verify the required parameter 'certificate_id' is set
        if ('certificate_id' not in params or
                params['certificate_id'] is None):
            raise ValueError("Missing the required parameter `certificate_id` when calling `certificate_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_name' in params:
            path_params['domainName'] = params['domain_name']  # noqa: E501
        if 'certificate_id' in params:
            path_params['certificateId'] = params['certificate_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/domain/{domainName}/certificate/{certificateId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Certificate',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def certificate_list(self, domain_name, **kwargs):  # noqa: E501
        """certificate_list  # noqa: E501

        Get the list of certificate for a specific domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.certificate_list(domain_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :param int next_id:
        :return: CertificateList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.certificate_list_with_http_info(domain_name, **kwargs)  # noqa: E501
        else:
            (data) = self.certificate_list_with_http_info(domain_name, **kwargs)  # noqa: E501
            return data

    def certificate_list_with_http_info(self, domain_name, **kwargs):  # noqa: E501
        """certificate_list  # noqa: E501

        Get the list of certificate for a specific domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.certificate_list_with_http_info(domain_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :param int next_id:
        :return: CertificateList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_name', 'next_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method certificate_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_name' is set
        if ('domain_name' not in params or
                params['domain_name'] is None):
            raise ValueError("Missing the required parameter `domain_name` when calling `certificate_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_name' in params:
            path_params['domainName'] = params['domain_name']  # noqa: E501

        query_params = []
        if 'next_id' in params:
            query_params.append(('next_id', params['next_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/domain/{domainName}/certificate/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domain_create(self, body, **kwargs):  # noqa: E501
        """domain_create  # noqa: E501

        Register a new domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_create(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DomainCreateUpdate body: (required)
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domain_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.domain_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def domain_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """domain_create  # noqa: E501

        Register a new domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_create_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DomainCreateUpdate body: (required)
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domain_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `domain_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/domain', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Domain',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domain_delete(self, domain_name, **kwargs):  # noqa: E501
        """domain_delete  # noqa: E501

        Remove the domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_delete(domain_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :return: DefaultMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domain_delete_with_http_info(domain_name, **kwargs)  # noqa: E501
        else:
            (data) = self.domain_delete_with_http_info(domain_name, **kwargs)  # noqa: E501
            return data

    def domain_delete_with_http_info(self, domain_name, **kwargs):  # noqa: E501
        """domain_delete  # noqa: E501

        Remove the domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_delete_with_http_info(domain_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :return: DefaultMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domain_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_name' is set
        if ('domain_name' not in params or
                params['domain_name'] is None):
            raise ValueError("Missing the required parameter `domain_name` when calling `domain_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_name' in params:
            path_params['domainName'] = params['domain_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/domain/{domainName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultMessage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domain_get(self, domain_name, **kwargs):  # noqa: E501
        """domain_get  # noqa: E501

        Get the details of a specific domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_get(domain_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domain_get_with_http_info(domain_name, **kwargs)  # noqa: E501
        else:
            (data) = self.domain_get_with_http_info(domain_name, **kwargs)  # noqa: E501
            return data

    def domain_get_with_http_info(self, domain_name, **kwargs):  # noqa: E501
        """domain_get  # noqa: E501

        Get the details of a specific domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_get_with_http_info(domain_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain_name: (required)
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domain_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_name' is set
        if ('domain_name' not in params or
                params['domain_name'] is None):
            raise ValueError("Missing the required parameter `domain_name` when calling `domain_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_name' in params:
            path_params['domainName'] = params['domain_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/domain/{domainName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Domain',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domain_list(self, **kwargs):  # noqa: E501
        """domain_list  # noqa: E501

        Get the list of your domains  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int next_id:
        :return: DomainList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domain_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.domain_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def domain_list_with_http_info(self, **kwargs):  # noqa: E501
        """domain_list  # noqa: E501

        Get the list of your domains  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int next_id:
        :return: DomainList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['next_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domain_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'next_id' in params:
            query_params.append(('next_id', params['next_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/domain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
